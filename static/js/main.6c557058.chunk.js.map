{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","id","onClick","number","Board","num","_this","this","numbers","rows","i","newRow","j","push","newSquare","Component","doArray","size","newArray","Array","fill","doRandomArray","randomArray","czy","rand","Math","floor","random","App","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","sign","trwa","moves","clickHandler","bind","assertThisInitialized","setState","_this3","App_Board","ReactDOM","render","App_App","document","getElementById","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c557058.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\nfunction Square(props)\n{\n\treturn (\n\t\t<button className=\"square\" id={props.id} onClick={props.onClick}>\n\t\t\t{props.number}\n\t\t</button>\n\t);\n}\n\nclass Board extends Component\n{\n\tnewSquare(num)\n\t{\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tid={this.props.id[num]} \n\t\t\t\tonClick={() => {this.props.onClick(num)}} \n\t\t\t\tnumber={this.props.numbers[num]} \n\t\t\t/>\n\t\t);\n\t}\n\t\n\trender()\n\t{\n\t\tlet rows = [];\n\t\tfor(let i = 0; i < 4; i++)\n\t\t{\n\t\t\tlet newRow = [];\n\t\t\tfor(let j = 0; j < 4; j++)\n\t\t\t{\n\t\t\t\tnewRow.push(this.newSquare(4*j+i));\n\t\t\t}\n\t\t\trows.push(<div className=\"board-row\">{newRow}</div>);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"board\">\n\t\t\t\t{rows}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction doArray(size)\n{\n\tlet newArray = Array(size).fill(null);\n\tfor(let i = 0; i < size; i++)\n\t{\n\t\tnewArray[i] = i+1;\n\t}\n\treturn newArray;\n}\n\nfunction doRandomArray(size)\n{\n\tlet randomArray = Array(size).fill(null);\n\tlet czy = Array(size).fill(false)\n\tlet i = 0;\n\twhile(i !== size-1)\n\t{\n\t\tlet rand = Math.floor(Math.random()*size);\n\t\tif(czy[rand] === false && rand !== size && rand !== 0)\n\t\t{\n\t\t\trandomArray[i] = rand;\n\t\t\tczy[rand] = true;\n\t\t\ti++;\n\t\t}\n\t}\n\treturn randomArray;\n}\n\nclass App extends Component {\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tid: doArray(16),\n\t\t\tnumbers: doRandomArray(16),\n\t\t\tsign: 'Gra ciÄ…gle trwa',\n\t\t\ttrwa: true,\n\t\t\tmoves: 0,\n\t\t};\n\t\tthis.clickHandler = this.clickHandler.bind(this);\n\t}\n\t\n\tclickHandler(i)\n\t{\n\t\tlet numbers = this.state.numbers;\n\t\tlet sign = this.state.sign;\n\t\tlet trwa = this.state.trwa;\n\t\tlet moves = this.state.moves;\n\t\t\n\t\tif(trwa === false)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(i%4 !== 0 && numbers[i-1] === null)\n\t\t{\n\t\t\tnumbers[i-1] = numbers[i];\n\t\t\tnumbers[i] = null;\n\t\t\tmoves++;\n\t\t}\n\t\tif(i%4 !== 3 && numbers[i+1] === null)\n\t\t{\n\t\t\tnumbers[i+1] = numbers[i];\n\t\t\tnumbers[i] = null;\n\t\t\tmoves++;\n\t\t}\n\t\tif(i-4 >= 0 && numbers[i-4] === null)\n\t\t{\n\t\t\tnumbers[i-4] = numbers[i];\n\t\t\tnumbers[i] = null;\n\t\t\tmoves++;\n\t\t}\n\t\tif(i+4 <= 15 && numbers[i+4] === null)\n\t\t{\n\t\t\tnumbers[i+4] = numbers[i];\n\t\t\tnumbers[i] = null;\n\t\t\tmoves++;\n\t\t}\n\t\t\n\t\tlet czy = true;\n\t\t\n\t\tfor(let j = 0; j < 15; j++)\n\t\t{\n\t\t\tif(numbers[j] !== this.state.id[j])\n\t\t\t{\n\t\t\t\tczy = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(czy === true)\n\t\t{\n\t\t\tsign = 'Koniec!'\n\t\t\ttrwa = false;\n\t\t}\n\t\t\n\t\tthis.setState({\n\t\t\tnumbers: numbers,\n\t\t\tsign: sign,\n\t\t\ttrwa: trwa,\n\t\t\tmoves: moves\n\t\t});\n\t}\n\t\n  render() {\n    return (\n\t\t<div>\n\t\t\t<h1>{this.state.sign}</h1>\n\t\t\t<h1>Wykonane ruchy: {this.state.moves}</h1>\n\t\t\t<Board \n\t\t\t\tnumbers={this.state.numbers} \n\t\t\t\tid={this.state.id} \n\t\t\t\tonClick={(i) => this.clickHandler(i)} \n\t\t\t/>\n\t\t</div>\n    );\n  }\n}\n\nexport default App;\n\nReactDOM.render(<App />, document.getElementById('root'));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}